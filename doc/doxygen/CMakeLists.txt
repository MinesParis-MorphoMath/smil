# Copyright (c) 2011-2016, Matthieu FAESSEL and ARMINES
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
#     * Redistributions of source code must retain the above copyright
#       notice, this list of conditions and the following disclaimer.
#     * Redistributions in binary form must reproduce the above copyright
#       notice, this list of conditions and the following disclaimer in the
#       documentation and/or other materials provided with the distribution.
#     * Neither the name of Matthieu FAESSEL, or ARMINES nor the
#       names of its contributors may be used to endorse or promote products
#       derived from this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS ``AS IS''
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDERS AND CONTRIBUTORS BE LIABLE
# FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
# SERVICES;
# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
# ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


FIND_PACKAGE(Doxygen REQUIRED)

SET(DOXYGEN_CONFIG_FILE SmilDoxyfile.in)
SET(DOXY_CONFIG_FILE ${CMAKE_CURRENT_BINARY_DIR}/Doxyfile)

SET(DOXYGEN_STYLE_FILE  SmilStyle.css.in)
SET(DOXY_STYLE_FILE ${CMAKE_CURRENT_BINARY_DIR}/SmilStyle.css)

SET(DOXYGEN_LAYOUT_FILE DoxygenLayout.xml.in)
SET(DOXY_LAYOUT_FILE ${CMAKE_CURRENT_BINARY_DIR}/DoxygenLayout.xml)

IF(DOXYGEN_FOUND AND DOXYGEN_CONFIG_FILE)

  # Convert svg images (requires Inkscape or ImageMagick)
  # (note that conversion is better with inkscape)
  SET(SVG_CONVERT_CMD)
  FIND_PROGRAM(INKSCAPE_EXECUTABLE inkscape${CMAKE_EXECUTABLE_SUFFIX})
  IF(INKSCAPE_EXECUTABLE)
    SET(SVG_CONVERT_CMD ${INKSCAPE_EXECUTABLE})
  ELSE(INKSCAPE_EXECUTABLE)
    FIND_PACKAGE(ImageMagick)
    IF(ImageMagick_FOUND)
      SET(SVG_CONVERT_CMD ${IMAGEMAGICK_CONVERT_EXECUTABLE})
    ENDIF(ImageMagick_FOUND)
  ENDIF(INKSCAPE_EXECUTABLE)

  SET(SVG_IMAGE_FILES)
  SET(PNG_IMAGE_FILES)
  SET(EPS_IMAGE_FILES)

  FILE(GLOB SVG_IMAGE_FILES "${CMAKE_CURRENT_SOURCE_DIR}/images/*.svg")
  IF(SVG_CONVERT_CMD AND SVG_IMAGE_FILES)
    FILE(MAKE_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}/images)
    FOREACH(_FCH ${SVG_IMAGE_FILES})
      GET_FILENAME_COMPONENT(_FCH_NAME_WE ${_FCH} NAME_WE)
      LIST(APPEND PNG_IMAGE_FILES
           "${CMAKE_CURRENT_BINARY_DIR}/images/${_FCH_NAME_WE}.png")
      IF(INKSCAPE_EXECUTABLE)
        ADD_CUSTOM_COMMAND(
          OUTPUT  ${CMAKE_CURRENT_BINARY_DIR}/images/${_FCH_NAME_WE}.png
          ${CMAKE_CURRENT_BINARY_DIR}/images/${_FCH_NAME_WE}.eps
          COMMAND ${INKSCAPE_EXECUTABLE}
            ${_FCH}
            --export-png=${CMAKE_CURRENT_BINARY_DIR}/images/${_FCH_NAME_WE}.png
          COMMAND ${INKSCAPE_EXECUTABLE}
            ${_FCH}
            --export-eps=${CMAKE_CURRENT_BINARY_DIR}/images/${_FCH_NAME_WE}.eps
          COMMENT "Converting ${_FCH_NAME_WE}.svg"
          DEPENDS ${_FCH}
        )
      ELSE(INKSCAPE_EXECUTABLE)
        ADD_CUSTOM_COMMAND(
          OUTPUT  ${CMAKE_CURRENT_BINARY_DIR}/images/${_FCH_NAME_WE}.png
          ${CMAKE_CURRENT_BINARY_DIR}/images/${_FCH_NAME_WE}.eps
          COMMAND ${IMAGEMAGICK_CONVERT_EXECUTABLE}
          ${_FCH} ${CMAKE_CURRENT_BINARY_DIR}/images/${_FCH_NAME_WE}.png
          COMMAND ${IMAGEMAGICK_CONVERT_EXECUTABLE}
          ${_FCH} ${CMAKE_CURRENT_BINARY_DIR}/images/${_FCH_NAME_WE}.eps
          COMMENT "Converting ${_FCH_NAME_WE}.svg"
          DEPENDS ${_FCH}
        )
      ENDIF(INKSCAPE_EXECUTABLE)
    ENDFOREACH(_FCH ${SVG_IMAGE_FILES})
  ENDIF(SVG_CONVERT_CMD AND SVG_IMAGE_FILES)



  MARK_AS_ADVANCED(DOXYGEN_CONFIG_FILE)

  OPTION(DOXYGEN_DEVEL_DOC "Generate developper (more complete) doc" OFF)

  ###### PROJECT ######
  SET(DOXY_PROJECT_NUMBER ${SMIL_VERSION})
  SET(DOXY_OUTPUT_DIRECTORY  ${CMAKE_CURRENT_BINARY_DIR})

  FILE(READ DoxyAliases.txt DOXY_ALIASES)
  SET(DOXY_ALIASES "\n${DOXY_ALIASES}")


  ###### BUILD ######
  IF(DOXYGEN_DEVEL_DOC)
    SET(DOXY_EXTRACT_PRIVATE YES)
    SET(DOXY_HIDE_UNDOC_MEMBERS NO)
    SET(DOXY_HIDE_UNDOC_CLASSES NO)
    SET(DOXY_HIDE_FRIEND_COMPOUNDS NO)
  ELSE(DOXYGEN_DEVEL_DOC)
    SET(DOXY_EXTRACT_PRIVATE NO)
    SET(DOXY_HIDE_UNDOC_MEMBERS YES)
    SET(DOXY_HIDE_UNDOC_CLASSES YES)
    SET(DOXY_HIDE_FRIEND_COMPOUNDS YES)
  ENDIF(DOXYGEN_DEVEL_DOC)

  SET(DOXY_CITE_BIB_FILES ${CMAKE_CURRENT_SOURCE_DIR}/Biblio.bib)


  ###### INPUT ######

  SET(DOXY_INPUT_DIRS
      "${DOXY_INPUT_DIRS} ${PROJECT_SOURCE_DIR} ${CMAKE_CURRENT_BINARY_DIR}")
  STRING(REGEX REPLACE ";" " \\\\ \n" DOXY_INPUT_DIRS "${DOXY_INPUT_DIRS}")

  SET(DOXY_EXAMPLE_PATH ${CMAKE_SOURCE_DIR}/doc/demos)
  STRING(REGEX REPLACE ";" " \\\\ \n" DOXY_EXAMPLE_PATH "${DOXY_EXAMPLE_PATH}")

  SET(DOXY_INCLUDE_PATH ${CMAKE_SOURCE_DIR}/doc/include)
  STRING(REGEX REPLACE ";" " \\\\ \n" DOXY_INCLUDE_PATH "${DOXY_INCLUDE_PATH}")

  SET(DOXYGEN_ADDITIONAL_IMAGE_PATH ""
      CACHE STRING "Additional search path for images")
  MARK_AS_ADVANCED(DOXYGEN_ADDITIONAL_IMAGE_PATH)
  SET(DOXY_IMAGE_PATH ${CMAKE_CURRENT_SOURCE_DIR}/images
                      ${CMAKE_CURRENT_BINARY_DIR}/images
                      ${DOXYGEN_ADDITIONAL_IMAGE_PATH})

  STRING(REGEX REPLACE ";" " \\\\ \n" DOXY_IMAGE_PATH "${DOXY_IMAGE_PATH}")


  ###### SOURCE BROWSER ######

  IF(DOXYGEN_DEVEL_DOC)
    SET(DOXY_VERBATIM_HEADERS YES)
  ELSE(DOXYGEN_DEVEL_DOC)
    SET(DOXY_VERBATIM_HEADERS NO)
  ENDIF(DOXYGEN_DEVEL_DOC)


  #### HTML ####

  OPTION(DOXYGEN_GENERATE_HTML "Generate html documentation" ON)
  IF(DOXYGEN_GENERATE_HTML)
    SET(DOXY_GENERATE_HTML YES)
    SET(DOXYGEN_HTML_HEADER "" CACHE STRING "html header file")
    MARK_AS_ADVANCED(DOXYGEN_HTML_HEADER)
    SET(DOXYGEN_HTML_FOOTER "" CACHE STRING "html footer file")
    MARK_AS_ADVANCED(DOXYGEN_HTML_FOOTER)
    SET(DOXYGEN_HTML_STYLESHEET "" CACHE STRING "html stylesheet file")
    MARK_AS_ADVANCED(DOXYGEN_HTML_STYLESHEET)

    ###### HTML HELP ######
    IF (WIN32)
      FIND_PACKAGE(HTMLHelp)
      IF(HTML_HELP_COMPILER)
        OPTION(DOXYGEN_GENERATE_HTML_HELP "Generate html-help documentation" ON)
        IF(DOXYGEN_GENERATE_HTML_HELP)
          SET(DOXY_GENERATE_HTMLHELP YES)
          SET(DOXY_CHM_FILE ${DOXY_OUTPUT_DIRECTORY}/${PROJECT_NAME}.chm)
          STRING(REGEX REPLACE "[/]" "\\\\" DOXY_CHM_FILE ${DOXY_CHM_FILE})
        ENDIF(DOXYGEN_GENERATE_HTML_HELP)
      ENDIF(HTML_HELP_COMPILER)
    ENDIF (WIN32)
  ELSE(DOXYGEN_GENERATE_HTML)
    SET(DOXY_GENERATE_HTML NO)
  ENDIF(DOXYGEN_GENERATE_HTML)


  #### LATEX ####

  OPTION(DOXYGEN_GENERATE_LATEX "Generate LateX documentation" OFF)
  IF(DOXYGEN_GENERATE_LATEX)
    SET(DOXY_GENERATE_LATEX YES)
    FIND_PACKAGE(LATEX REQUIRED)
  ELSE(DOXYGEN_GENERATE_LATEX)
    SET(DOXY_GENERATE_LATEX NO)
    # we need latex for doxygen because of the formulas
    FIND_PACKAGE(LATEX)
  ENDIF(DOXYGEN_GENERATE_LATEX)
  #  MARK_AS_ADVANCED(DOXYGEN_GENERATE_LATEX)


  #### DOT ####

  IF(DOXYGEN_DOT_FOUND)
    SET(DOXY_HAVE_DOT YES)
  ELSE(DOXYGEN_DOT_FOUND)
    SET(DOXY_HAVE_DOT NO)
  ENDIF(DOXYGEN_DOT_FOUND)



  ###### DEMOS ######

  # ADD PYTHON DEMOS TO EXAMPLES
  SET(DOXY_DEMOS)
  FILE(GLOB PYTHON_DEMOS RELATIVE ${CMAKE_SOURCE_DIR}/doc/demos/python
                                  ${CMAKE_SOURCE_DIR}/doc/demos/python/*.py)
  FOREACH(_FCH ${PYTHON_DEMOS})
    GET_FILENAME_COMPONENT(_F_NAME ${_FCH} NAME)
    SET(DOXY_DEMOS "${DOXY_DEMOS}
        /**
          * @example ${_F_NAME}
          */")
        ##### * \\ws_exec_demo_button{${_F_NAME}} <br>
  ENDFOREACH(_FCH ${PYTHON_DEMOS})
  FILE(WRITE ${CMAKE_CURRENT_BINARY_DIR}/demos.doxygen ${DOXY_DEMOS})

  ###### PREDEFINED ######

  # Add compiler definitions to doxygen PREDEFINED
  SET(DOXYGEN_PREDEFINED
      SMIL_HOME_PAGE=http://smil.cmm.mines-paristech.fr/
  )
  FOREACH(_DEF ${COMP_DEFS})
    SET(DOXYGEN_PREDEFINED "${DOXYGEN_PREDEFINED} ${_DEF} DOXYGEN")
  ENDFOREACH(_DEF ${COMP_DEFS})
  IF(WRAP_PYTHON)
    SET(DOXYGEN_PREDEFINED "${DOXYGEN_PREDEFINED} SWIGPYTHON")
  ENDIF(WRAP_PYTHON)
  IF(WRAP_JAVA)
    SET(DOXYGEN_PREDEFINED "${DOXYGEN_PREDEFINED} SWIGJAVA")
  ENDIF(WRAP_JAVA)
  IF(WRAP_OCTAVE)
    SET(DOXYGEN_PREDEFINED "${DOXYGEN_PREDEFINED} SWIGOCTAVE")
  ENDIF(WRAP_OCTAVE)



  # Ajoute guillemets aux exe pour chemins avec espaces de windows...
  SET(LATEX_COMPILER \"${LATEX_COMPILER}\")
  SET(MAKEINDEX_COMPILER \"${MAKEINDEX_COMPILER}\")
  SET(HTML_HELP_COMPILER \"${HTML_HELP_COMPILER}\")

  CONFIGURE_FILE(${DOXYGEN_CONFIG_FILE} ${DOXY_CONFIG_FILE} @ONLY )
  CONFIGURE_FILE(${DOXYGEN_LAYOUT_FILE} ${DOXY_LAYOUT_FILE} @ONLY )
  CONFIGURE_FILE(${DOXYGEN_STYLE_FILE}  ${DOXY_STYLE_FILE} @ONLY )

  ADD_CUSTOM_TARGET(doc ${DOXYGEN_EXECUTABLE} ${DOXY_CONFIG}
    DEPENDS ${PNG_IMAGE_FILES} ${EPS_IMAGE_FILES}
  )




  FIND_PACKAGE(PythonInterp)
  SET(PYTHON_DOC_INTERFACE_FILE ${PROJECT_BINARY_DIR}/smilDoc.i)
  SET_SOURCE_FILES_PROPERTIES(${PYTHON_DOC_INTERFACE_FILE}
                              PROPERTIES GENERATED TRUE)
  IF(NOT EXISTS ${PYTHON_DOC_INTERFACE_FILE})
    FILE(WRITE ${PYTHON_DOC_INTERFACE_FILE})
  ENDIF(NOT EXISTS ${PYTHON_DOC_INTERFACE_FILE})

  SET(PYTHON_DOC_SRCS)
  SET(_APPEND_ARG "")
  FILE(GLOB DOXY_XML_FILES ${DOXY_OUTPUT_DIRECTORY}/xml/*.xml)
  FOREACH(_FICH ${DOXY_XML_FILES})
    STRING(REPLACE ".xml" ".i" _SWIG_FICH ${_FICH})
    ADD_CUSTOM_COMMAND(
      OUTPUT  ${_SWIG_FICH} ${PYTHON_DOC_INTERFACE_FILE}
      COMMAND ${PYTHON_EXECUTABLE} ${CMAKE_CURRENT_SOURCE_DIR}/doxy2swig.py
        --no-function-definition
        ${_APPEND_ARG} ${_FICH}
        ${PYTHON_DOC_INTERFACE_FILE}
        WORKING_DIRECTORY ${DOXY_OUTPUT_DIRECTORY}/xml
        COMMENT "Wrapping ${_FICH} doc"
        DEPENDS doc
    )
    LIST(APPEND PYTHON_DOC_SRCS ${_SWIG_FICH})
    IF(NOT _APPEND_ARG)
      SET(_APPEND_ARG "-a")
    ENDIF(NOT _APPEND_ARG)

    # SET(SWIG_INTERFACE_FILES ${SWIG_INTERFACE_FILES} ${_SWIG_FICH}
    #     PARENT_SCOPE)
  ENDFOREACH(_FICH ${DOXY_XML_FILES})


  ADD_CUSTOM_TARGET(python_doc SOURCES ${PYTHON_DOC_SRCS}
      DEPENDS doc ${PYTHON_DOC_INTERFACE_FILE}
  )

ENDIF(DOXYGEN_FOUND AND DOXYGEN_CONFIG_FILE)

