/**
 * @page p402_web_instructions Contribution Guidelines
 *
 * @section style_section_2 Guidelines
 *
 * This is about good programming practices : what to do and not in your
 * programs. Suggestions about reliability, security, ...
 *
 * Writing programming guidelines specific to a project is a long, tedious and
 * and useless task while there are very good references on the subject.
 *
 * Take the time, even slowly, to read and understand some references...
 *
 *  - <a href="http://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines">
 * C++ Core Guidelines</a> by Bjarne Stroustrup and Herb Sutter;
 *  - <a href="http://www.codingstandard.com/">PRQA - High Integrity C++
 * Coding Standard Version 4.0</a>
 *  - <a href="https://llvm.org/docs/CodingStandards.html">LLVM Coding Style</a>
 *
 * @subsection commonmistakes Common bad practices :
 *
 * Some common mistakes or bad practices :
 *  - warnings are acceptable just while still debugging. Code in the master
 * branch shall be free of warnings (same as errors);
 *  - code doing different things, even if related, shall be break down in
 * different source files (modular programming);
 *  - avoid duplication of source code. If you have the same piece of code doing
 *    the same thing in different places of the program, create a function;
 *  - as in french language, words/symbols/tokens/operators shall be separated
 * by spaces (<code>clang-format</code> may solve this...);
 *  - meaningless (or wrong meaning) variable names;
 *  - hard coding (using something like <b><code>"# define SIZE 256"</code></b>)
 * for parameters which can change with time or limit the usability of the
 * program;
 *  - lack of out of bounds checking;
 *  - adequate error and exception handling;
 *  - forgetting to remove "dead code" (some lines useful only while the code
 * was being debugged/validated);
 *  - incoherence over time : not doing the same thing the same way at different
 * moments.


 * @section format_section_2 Code Formatting
 *
 * Code formatting isn't just an aesthetic issue. An homogeneous and clear
 * presentation contributes to unambigous and easy understanding.
 *
 * The code style is that proposed by <b><code>LLVM</code></b> with some small
 * enhancements. And the tool is <b><code>clang-format</code></b>.
 *
 * Formatting is done simply with the following commands, the first one just
 * creates a backup copy before formatting, inplace, the original source code :
 * \n
 *
 *     $ cp -p filename filename.bak
 *     $ clang-format -i -style=file filename
 *
 * Obs :
 *   - no problem if you don't follow this style. It's enough to run the
 * formatter on the final version of your file, before integrating it to the
 * master or develop branch;
 *   - the choosen style has minors differences from <code>LLVM</code> style.
 *     These differences are set at <code>.clang-format</code> file placed at
 *     the root of source file tree :
 * \n
 *
 *     AllowShortFunctionsOnASingleLine: false
 *     BreakBeforeBraces:                Linux
 *     AlignConsecutiveAssignments:      true
 *     AlignConsecutiveDeclarations:     true
 *     NamespaceIndentation:             All
 *     ReflowComents:                    true
 *     SortIncludes:                     false
 *     SortUsingDeclarations:            false
 *
 *   - <b><code>clang-format</code></b> packaged as :
 *     - Ubuntu : <code>clang-format</code>
 *     - CentOS/RedHat/Fedora : <code>clang</code>
 *   - <b>clang-format</b> documentation can be found <a
 * href="https://clang.llvm.org/docs/ClangFormat.html">here</a>

 * @section proto_section_2  Source file prototypes :
 *
 * To help you start with your coding, inside directory
 * <b><code>dev-tools</code></b>, you'll find two files :
 * <b><code>dev-tools/DProto.hpp</code></b> and
 * <b><code>dev-tools/DProto.cpp</code></b>.
 *
 * As you can see at file <b><code>DProto.hpp</code></b>, the content inside
 * headers file shall be protected by a couple <b><code>"#ifdef
 * _SOMETHING_H"</code></b> and <b><code>"#endif"</code></b> directives, to
 * avoid a code being included twice.
 *
 * The way to build these variable is defined from the filename :
 *   - a <b><code>"_"</code></b> (underline) is used as a prefix;
 *   - <b><code>"."</code></b> (dot) are converted to <b><code>"_"</code></b>;
 *   - words are separated by <b><code>"_"</code></b> even it they don't appear
 * this way in the filename.
 *
 * As an example, if the filename is <b><code>DMorphoBestCode.h</code></b>, the
 * directive name becomes <b><code>_D_MORPHO_BEST_CODE_H</code></b>.
 *
 * @section naming_section_2 Naming guidelines
 *
 * @txtbold{Rule of thumb} : Every name exposed to Smil users shall be
 * @txtbold{meaninfull}. Avoid @txtbold{acronyms} or @txtbold{shortcuts},
 * unless they are fully known by users out of Smil development group. Every
 * name exposed to users shall be directly related to some concept usually
 * found in textbooks and vice-versa.
 *
 *  - Avoid meaningless names. Exceptions may be for some usual loop control
 * variables : x, y, z, i, j, k;
 *  - @txtbold{Functions and Methods} : 
 *    - function names are a sequence of words without spaces, with the first 
 *      character of each word in uppercase, except the first one. E.g. : 
 *      @txttype{lambdaLabel}, @txttype{imageResize}, 
 *      @txttype{distanceEuclidean}, ...
 *    - function name length shall be limited to something like 15-20
 *      characters. The full description of what that function does shall be
 *      done in the documentation, not in the name of the function. If the
 *      function name is too long it can, usually, be shortened.
 *  - @txtbold{Macros and defines} : every character in uppercase. \n
 *    Although using macros are discouraged you should always put all 
 *    caracteres in macros and defines in @txtbold{uppercase}
 *  - @txtbold{Classes}
 *  - @txtbold{Variables}
 *  - @txtbold{Files}
 *    - C++ source filenames begin always with <b>D</b>;
 *    - File extensions per directory :
 *      - <b><code>src</code></b> : <code>.cpp</code> - C++ source files
 *      - <b><code>include</code></b> : <code>.h</code> - C++ headers
 *      - <b><code>include/private</code></b> : <code>.hpp</code> - C++ headers

 *
 * @section doc_section_2 Code documentation (Doxygen)
 *
 * @subsection funcdoc Function documentation
 *
 * All functions shall be documented with a header like the following. Some
 * parts may be missing if not necessary.
 *
 *     /**
 *      * imageBeautifier() - Image Beautifier
 *      *
 *      * Image Beautifier based on the algorithm described by John Beautiful
 *      *
 *      * @note
 *      *  This is a note about imageBeautifier()
 *      * 
 *      * @warning
 *      *  This is a warning about imageBeautifier()
 *      *  
 *      * @see
 *      *  Some bibliographic reference about imageBeautifier()
 *      *
 *      * @param[in]  imgIn : Input image
 *      * @param[out] imgOut : Image beautified
 *      * @returns Some result or error code
 *      * / 
 *
 * @subsection doxyoddities_section-2 Doxygen / clang-format Oddities
 *
 *  - Use <b><code>"@tag"</code></b> syntax instead of
 * <b><code>"\tag"</code></b> : @txttype{clang-format} doesn't handle these two
 * constructions the same way and, sometimes, may break the structure. It seems
 * that using <b><code>"@tag"</code></b> gives more predictable results. Still
 * better, remember : be coherent and do the same thing the same way all the
 * time.
 *  - for the same reason, always insert a blank comment line between two blocks
 * of doxygen documentation. This will prevent some @txttype{Doxygen} oddities.
 *  - @txttype{clang-format} has problems when handling comments in the same 
 * line than code. So, avoid things like this :
 * @code{.unparsed}
 *      if (x > 0) { // Yeah, it's ok
 * @endcode
 *    and privilegiate this :
 * @code{.unparsed}
 *      // Yeah, it's ok
 *      if (x > 0) {
 * @endcode
 *
 * @tableofcontents
 * \n
 */
