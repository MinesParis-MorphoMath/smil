# Copyright (c) 2011, Matthieu FAESSEL and ARMINES
# All rights reserved.
# 
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
#     * Redistributions of source code must retain the above copyright
#       notice, this list of conditions and the following disclaimer.
#     * Redistributions in binary form must reproduce the above copyright
#       notice, this list of conditions and the following disclaimer in the
#       documentation and/or other materials provided with the distribution.
#     * Neither the name of Matthieu FAESSEL, or ARMINES nor the
#       names of its contributors may be used to endorse or promote products
#       derived from this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS ``AS IS'' AND ANY
# EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDERS AND CONTRIBUTORS BE LIABLE FOR ANY
# DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
# ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

PROJECT(Smil)

CMAKE_MINIMUM_REQUIRED(VERSION 2.6)

SET(MODULES	Core
		Gui
		Base
		IO
		Morpho
)

SET(SMIL_MAJOR_VERSION 0)
SET(SMIL_MINOR_VERSION 1)
SET(SMIL_VERSION ${SMIL_MAJOR_VERSION}.${SMIL_MINOR_VERSION})

ADD_DEFINITIONS("-DSMIL_MAJOR_VERSION=${SMIL_MAJOR_VERSION}")
ADD_DEFINITIONS("-DSMIL_MINOR_VERSION=${SMIL_MINOR_VERSION}")
ADD_DEFINITIONS("-DSMIL_VERSION=${SMIL_VERSION}")


LIST(APPEND CMAKE_MODULE_PATH 
	"${CMAKE_CURRENT_SOURCE_DIR}/CMake" 
	"${CMAKE_CURRENT_SOURCE_DIR}/CMake/swig" 
	${PROJECT_BINARY_DIR}
	)
INCLUDE_DIRECTORIES("${CMAKE_CURRENT_SOURCE_DIR}/CMake")
INCLUDE_DIRECTORIES("${CMAKE_CURRENT_SOURCE_DIR}/CMake/swig")
INCLUDE(GenMacros)


SET(SMIL_LIB_PREFIX smil)
SET(SMIL_EXT_DEPS)

###### COMPILATION PATHS ######

IF(NOT LIBRARY_OUTPUT_PATH)
	SET(LIBRARY_OUTPUT_PATH 
		${PROJECT_BINARY_DIR}/lib CACHE PATH 
		"Single output directory for building all libraries."
	)
	MARK_AS_ADVANCED(LIBRARY_OUTPUT_PATH)
ENDIF(NOT LIBRARY_OUTPUT_PATH)
LINK_DIRECTORIES(${LIBRARY_OUTPUT_PATH})


IF(NOT EXECUTABLE_OUTPUT_PATH)
	SET(EXECUTABLE_OUTPUT_PATH 
		${PROJECT_BINARY_DIR}/bin CACHE PATH 
		"Single output directory for building all binaries."
	)
	MARK_AS_ADVANCED(EXECUTABLE_OUTPUT_PATH)
ENDIF(NOT EXECUTABLE_OUTPUT_PATH)


###### BUILD OPTIONS ######

# Default build type : Release
IF(NOT CMAKE_BUILD_TYPE)
	SET(CMAKE_BUILD_TYPE "Release" CACHE STRING "" FORCE)
ENDIF(NOT CMAKE_BUILD_TYPE)

SET(DEBUG_LEVEL "0" CACHE STRING "Debug verbose level")
MARK_AS_ADVANCED(DEBUG_LEVEL)
IF(CMAKE_BUILD_TYPE STREQUAL "Debug")
    ADD_DEFINITIONS("-DDEBUG_LEVEL=${DEBUG_LEVEL}")
ENDIF(CMAKE_BUILD_TYPE STREQUAL "Debug")


OPTION(BUILD_SHARED_LIBS "Build shared libs" ON)
IF(BUILD_SHARED_LIBS)
	ADD_DEFINITIONS("-DSHARED_LIBS")
ENDIF(BUILD_SHARED_LIBS)

# Clang
IF("${CMAKE_CXX_COMPILER_ID}" STREQUAL "Clang")
	SET(CMAKE_COMPILER_IS_CLANGXX 1)
ENDIF("${CMAKE_CXX_COMPILER_ID}" STREQUAL "Clang")

IF(MINGW)
	# Problemes de link avec Mingw (en particulier pour imports de Java JNI)
	SET(CMAKE_MODULE_LINKER_FLAGS "${CMAKE_MODULE_LINKER_FLAGS} -Wl,--kill-at")
ENDIF(MINGW)

IF(MSVC)
	ADD_DEFINITIONS("/wd4996 /wd4251")
ENDIF(MSVC)

# 64 Bits
IF(CMAKE_SIZEOF_VOID_P EQUAL 8)
	# 4 -> 32 BITS, 8 -> 64 BITS
	MESSAGE(STATUS "64 bits system detected")
	OPTION(USE_64BIT_IDS "Compile for 64 bits system" ON)
	IF(USE_64BIT_IDS)
		ADD_DEFINITIONS("-DUSE_64BIT_IDS")
	ENDIF(USE_64BIT_IDS)
ELSE(CMAKE_SIZEOF_VOID_P EQUAL 8)
	MESSAGE(STATUS "32 bits system detected")
ENDIF(CMAKE_SIZEOF_VOID_P EQUAL 8)

# ADD_DEFINITIONS("-fPIC")
# ADD_DEFINITIONS("-fPIC -finline-functions")


###### OPTIMIZATIONS ######

OPTION(USE_SSE_INT "Use sse intrinsics" OFF)
IF(USE_SSE_INT)
	ADD_DEFINITIONS("-DSMIL_USE_SSE_INT")
ENDIF(USE_SSE_INT)

# INCLUDE(CompilerFlags)

INCLUDE(OptimizeForArchitecture)
OPTION(USE_OPTIMIZATION "Use optimizations" ON)
IF(USE_OPTIMIZATION)
	SET(TARGET_ARCHITECTURE "auto" CACHE STRING "CPU architecture to optimize for. Using an incorrect setting here can result in crashes of the resulting binary because of invalid instructions used.\nSetting the value to \"auto\" will try to optimize for the architecture where cmake is called.\nOther supported values are: \"none\", \"generic\", \"core\", \"merom\" (65nm Core2), \"penryn\" (45nm Core2), \"nehalem\", \"westmere\", \"sandy-bridge\", \"atom\", \"k8\", \"k8-sse3\", \"barcelona\", \"istanbul\", \"magny-cours\", \"bulldozer\", \"interlagos\".")
#    ADD_DEFINITIONS("-ftree-vectorize -ftree-vectorizer-verbose=1")
#     ADD_DEFINITIONS("-ftree-vectorize -g -ffast-math  -march=core2 -mtune=core2  -msse2 -fdump-tree-optimized")
	
	OPTION(VERBOSE_OPTIMIZATION "Show verbose optimizations" OFF)
	
	IF(CMAKE_COMPILER_IS_GNUCC AND NOT CMAKE_COMPILER_IS_CLANGXX)
	    AddCompilerFlag("-ftree-vectorize -ftree-slp-vectorize")
	    IF(TARGET_ARCHITECTURE STREQUAL "auto")
		AddCompilerFlag("-march=native -mtune=generic")
# 		OptimizeForArchitecture()
	    ELSE(TARGET_ARCHITECTURE STREQUAL "auto")
		AddCompilerFlag("-march=${TARGET_ARCHITECTURE} -mtune=generic")
	    ENDIF(TARGET_ARCHITECTURE STREQUAL "auto")
	    IF(VERBOSE_OPTIMIZATION)
		    ADD_DEFINITIONS("-ftree-vectorizer-verbose=5")
	    ENDIF(VERBOSE_OPTIMIZATION)
	ELSE(CMAKE_COMPILER_IS_GNUCC AND NOT CMAKE_COMPILER_IS_CLANGXX)
		OptimizeForArchitecture()
	ENDIF(CMAKE_COMPILER_IS_GNUCC AND NOT CMAKE_COMPILER_IS_CLANGXX)
	
	MESSAGE(STATUS "Compiler flags: "${CMAKE_CXX_FLAGS})
ELSE(USE_OPTIMIZATION)
	AddCompilerFlag("-fno-tree-vectorize")
ENDIF(USE_OPTIMIZATION)



OPTION(USE_OPEN_MP "Use OpenMP parallelization" OFF)
IF(USE_OPEN_MP)
	IF(MSVC)
		ADD_DEFINITIONS("-DUSE_OPEN_MP /openmp")
	ELSE(MSVC)
		ADD_DEFINITIONS("-DUSE_OPEN_MP -fopenmp")
		LIST(APPEND SMIL_EXT_DEPS gomp)
	ENDIF(MSVC)
ENDIF(USE_OPEN_MP)


###### WRAPPING ######

OPTION(WRAP_CPP "Wrap non-template C++ headers and libraries" FALSE)
IF(WRAP_CPP)
      INCLUDE(WrapCpp)
      FIND_PACKAGE(PythonInterp REQUIRED)
ENDIF(WRAP_CPP)

OPTION(WRAP_PYTHON "Wrap Python" FALSE)
IF(WRAP_PYTHON)
      FIND_PACKAGE(PythonLibs REQUIRED)
      INCLUDE_DIRECTORIES(${PYTHON_INCLUDE_PATH})
ENDIF(WRAP_PYTHON)

OPTION(WRAP_JAVA "Wrap Java" FALSE)
IF(WRAP_JAVA)
      FIND_PACKAGE(JNI REQUIRED)
      INCLUDE_DIRECTORIES(${JNI_INCLUDE_DIRS})
ENDIF(WRAP_JAVA)

OPTION(WRAP_OCTAVE "Wrap Octave" FALSE)
IF(WRAP_OCTAVE)
      FIND_PATH(OCTAVE_INCLUDE_DIR "octave/oct.h")
      INCLUDE_DIRECTORIES(${OCTAVE_INCLUDE_DIR})
ENDIF(WRAP_OCTAVE)

OPTION(WRAP_RUBY "Wrap Ruby" FALSE)
IF(WRAP_RUBY)
      FIND_PACKAGE(Ruby REQUIRED)
      INCLUDE_DIRECTORIES(${RUBY_INCLUDE_PATH})
ENDIF(WRAP_RUBY)

IF(WRAP_CPP OR WRAP_PYTHON OR WRAP_JAVA OR WRAP_OCTAVE OR WRAP_RUBY)

      SET(USE_WRAPPER TRUE)

      IF(CMAKE_CROSSCOMPILING)
	      # Problems with FindSWIG when cross-compiling...
	      LIST(APPEND CMAKE_MODULE_PATH "${CMAKE_CURRENT_SOURCE_DIR}/CMake/CrossCompilation")
#  	      CONFIGURE_FILE(${CMAKE_CURRENT_SOURCE_DIR}/CMake/_FindSWIG.cmake ${PROJECT_BINARY_DIR}/FindSWIG.cmake)
# 	      LIST(APPEND CMAKE_FIND_ROOT_PATH /usr/local/mingw32)
      ENDIF(CMAKE_CROSSCOMPILING)

      FIND_PACKAGE(SWIG REQUIRED)

      SET(CMAKE_SWIG_OUTDIR ${LIBRARY_OUTPUT_PATH})

      INCLUDE(${SWIG_USE_FILE})
ENDIF(WRAP_CPP OR WRAP_PYTHON OR WRAP_JAVA OR WRAP_OCTAVE OR WRAP_RUBY)


###### GUI ######

FIND_PACKAGE(Qt4 QUIET)
IF(QT4_FOUND)
      OPTION(USE_QT "Build Qt Gui" ON)
ELSE(QT4_FOUND)
      OPTION(USE_QT "Build Qt Gui" OFF)
ENDIF(QT4_FOUND)
IF(USE_QT)
      IF(CMAKE_CROSSCOMPILING)
	      SET(QT_HEADERS_DIR “/usr/i686-w64-mingw32/include”)
	      SET(QT_LIBRARY_DIR “/usr/i686-w64-mingw32/lib”)
      ENDIF()
      SET(QT_USE_FRAMEWORKS OFF CACHE INTERNAL "" FORCE)
      FIND_PACKAGE(Qt4 REQUIRED)
      INCLUDE(${QT_USE_FILE})
      INCLUDE_DIRECTORIES(${QT_INCLUDES} ${QT_QTCORE_INCLUDE_DIR}/..)
      LINK_DIRECTORIES(${QT_LIBRARY_DIRS})
      ADD_DEFINITIONS(${QT_DEFINITIONS} -DUSE_QT)
      LIST(APPEND SMIL_EXT_DEPS ${QT_LIBRARIES})
ENDIF(USE_QT)

OPTION(USE_AALIB "Build AALib Gui" OFF)
IF(USE_AALIB)
      FIND_LIBRARY(AALIB_LIBRARY aa)
      FIND_PATH(AALIB_INCLUDES aalib.h)
      INCLUDE_DIRECTORIES(${AALIB_INCLUDES})
      ADD_DEFINITIONS(-DUSE_AALIB)
      LIST(APPEND SMIL_EXT_DEPS ${AALIB_LIBRARY})
ENDIF(USE_AALIB)

###### IO ######

FIND_PACKAGE(PNG)
IF(PNG_FOUND)
    OPTION(USE_PNG "Use PNG" ON)
ELSE(PNG_FOUND)
    OPTION(USE_PNG "Use PNG" OFF)
ENDIF(PNG_FOUND)
IF(USE_PNG)
	ADD_DEFINITIONS("-DUSE_PNG")
	FIND_PACKAGE(PNG REQUIRED)
	INCLUDE_DIRECTORIES(${PNG_INCLUDE_DIR})
	LINK_DIRECTORIES(${PNG_LIBRARY})
	LIST(APPEND SMIL_EXT_DEPS ${PNG_LIBRARIES})
ENDIF(USE_PNG)

FIND_PACKAGE(CURL)
IF(CURL_FOUND)
    OPTION(USE_CURL "Use Curl for socket requests" ON)
ELSE(CURL_FOUND)
    OPTION(USE_CURL "Use Curl for socket requests" OFF)
ENDIF(CURL_FOUND)
IF(USE_CURL)
	ADD_DEFINITIONS("-DUSE_CURL")
	FIND_PACKAGE(CURL REQUIRED)
	INCLUDE_DIRECTORIES(${CURL_INCLUDE_DIRS})
	LINK_DIRECTORIES(${CURL_LIBRARIES})
	LIST(APPEND SMIL_EXT_DEPS ${CURL_LIBRARIES})
ENDIF(USE_CURL)


###### MISC ######

IF(WRAP_PYTHON)
	OPTION(USE_NUMPY "Use Numpy for python pixels manipulation." OFF)
	IF(USE_NUMPY)
		FIND_PATH(PYTHON_NUMPY_INCLUDE_DIR numpy/arrayobject.h
			  "${PYTHON_INCLUDE_PATH}"
			  DOC "Directory where the numpy/arrayobject.h header file can be found. This file is part of the numpy package"
		)
	
		ADD_DEFINITIONS("-DUSE_NUMPY")
		INCLUDE_DIRECTORIES(${PYTHON_NUMPY_INCLUDE_DIR})
		LINK_DIRECTORIES(/usr/lib/pyshared/python2.7/numpy/core/)
	ENDIF(USE_NUMPY)
ENDIF(WRAP_PYTHON)




###### DOC ######

OPTION(BUILD_DOC "Generate documentation" OFF)

###### TESTS ######

OPTION(BUILD_TEST "Build tests" OFF)
IF(BUILD_TEST)
	ENABLE_TESTING()
ENDIF(BUILD_TEST)



###### IMAGE TYPES WRAPPED ######

SET(IMAGE_TYPES "UINT8;UINT16" CACHE STRING "Image types wrapped (first type will be the default one)")
LIST(GET IMAGE_TYPES 0 DEFAULT_IMAGE_TYPE)

SET(IMAGE_SPECIAL_TYPES)
SET(DATA_TYPES_STR)
SET(DATA_TYPES_QUOTE_STR)
SET(IMAGE_TYPES_STR)

SET(SWIG_DEPS smilCore)

FOREACH(_IMG_TYPE ${IMAGE_TYPES})
	IF(IS_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}/NSTypes/${_IMG_TYPE})
		LIST(APPEND IMAGE_SPECIAL_TYPES ${_IMG_TYPE})
		LIST(APPEND SWIG_DEPS smil${_IMG_TYPE})
	ENDIF(IS_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}/NSTypes/${_IMG_TYPE})
	STRING(TOUPPER ${_IMG_TYPE} _IMG_TYPE_UP)
	ADD_DEFINITIONS("-DSMIL_WRAP_${_IMG_TYPE_UP}")
	SET(DATA_TYPES_STR ${DATA_TYPES_STR}${_IMG_TYPE},)
	SET(DATA_TYPES_QUOTE_STR ${DATA_TYPES_QUOTE_STR}"${_IMG_TYPE}",)
	SET(IMAGE_TYPES_STR ${IMAGE_TYPES_STR}Image_${_IMG_TYPE},)
ENDFOREACH(_IMG_TYPE ${IMAGE_TYPES})

STRING(REGEX REPLACE ",$" "" IMAGE_TYPES_STR ${IMAGE_TYPES_STR})
STRING(REGEX REPLACE ",$" "" DATA_TYPES_STR ${DATA_TYPES_STR})
STRING(REGEX REPLACE ",$" "" DATA_TYPES_QUOTE_STR ${DATA_TYPES_QUOTE_STR})

# SWIG WRAP CLASS
SET(_STWD "${_STWD}%define TEMPLATE_WRAP_CLASS(class, name)\n")
FOREACH(_IMG_TYPE ${IMAGE_TYPES})
	SET(_STWD "${_STWD}  %template(name \#\# _${_IMG_TYPE}) class<${_IMG_TYPE}>;\n")
ENDFOREACH(_IMG_TYPE ${IMAGE_TYPES})
SET(_STWD "${_STWD}%enddef\n\n")

# Two template types, both variables
SET(_STWD "${_STWD}%define TEMPLATE_WRAP_CLASS_2T_BOTH(class, name)\n")
FOREACH(_IMG_TYPE ${IMAGE_TYPES})
	SET(_STWD "${_STWD}  %template(name \#\# _${_IMG_TYPE}) class<${_IMG_TYPE},${_IMG_TYPE}>;\n")
ENDFOREACH(_IMG_TYPE ${IMAGE_TYPES})
SET(_STWD "${_STWD}%enddef\n\n")

# Two template types, first variable, second fixed
SET(_STWD "${_STWD}%define TEMPLATE_WRAP_CLASS_2T_FIX_SECOND(class, fixedType, name)\n")
FOREACH(_IMG_TYPE ${IMAGE_TYPES})
	SET(_STWD "${_STWD}  %template(name \#\# _${_IMG_TYPE} \#\# _ \#\# fixedType) class<${_IMG_TYPE},fixedType >;\n")
ENDFOREACH(_IMG_TYPE ${IMAGE_TYPES})
SET(_STWD "${_STWD}%enddef\n\n")

# Two template types, first fixed, second variable
SET(_STWD "${_STWD}%define TEMPLATE_WRAP_CLASS_2T_FIX_FIRST(class, fixedType, name)\n")
FOREACH(_IMG_TYPE ${IMAGE_TYPES})
	SET(_STWD "${_STWD}  %template(name \#\# _ \#\# fixedType \#\# _${_IMG_TYPE}) class<fixedType,${_IMG_TYPE}>;\n")
ENDFOREACH(_IMG_TYPE ${IMAGE_TYPES})
SET(_STWD "${_STWD}%enddef\n\n")

# SWIG WRAP FUNC
SET(_STWD "${_STWD}%define TEMPLATE_WRAP_FUNC(func)\n")
FOREACH(_IMG_TYPE ${IMAGE_TYPES})
	SET(_STWD "${_STWD}  %template(func) func<${_IMG_TYPE}>;\n")
ENDFOREACH(_IMG_TYPE ${IMAGE_TYPES})
SET(_STWD "${_STWD}%enddef\n\n")

# SWIG WRAP CROSS FUNC 2 IMGS
SET(_STWD "${_STWD}%define TEMPLATE_WRAP_FUNC_CROSS2(func)\n")
FOREACH(_IMG_TYPE ${IMAGE_TYPES})
	FOREACH(_IMG_TYPE2 ${IMAGE_TYPES})
		SET(_STWD "${_STWD}  %template(func) func<${_IMG_TYPE},${_IMG_TYPE2}>;\n")
	ENDFOREACH(_IMG_TYPE2 ${IMAGE_TYPES})
ENDFOREACH(_IMG_TYPE ${IMAGE_TYPES})
SET(_STWD "${_STWD}%enddef\n\n")


SET(SWIG_TEMPLATE_WRAP_DEFINITIONS ${_STWD})

MESSAGE(STATUS "Image types generated: ${DATA_TYPES_STR}")



# Retrieve all compile flags
GET_DIRECTORY_PROPERTY(COMP_DEFS COMPILE_DEFINITIONS)
SET(COMPILE_FLAGS)
FOREACH(_DEF ${COMP_DEFS})
	SET(COMPILE_FLAGS ${COMPILE_FLAGS} -D${_DEF})
ENDFOREACH(_DEF ${COMP_DEFS})


IF(USE_WRAPPER)
 	SET(CMAKE_SWIG_FLAGS ${CMAKE_SWIG_FLAGS} ${COMPILE_FLAGS})
	# SWIG runtime code (see http://www.swig.org/Doc1.3/Modules.html#Modules_nn2)
#  	SET(CMAKE_SWIG_FLAGS ${CMAKE_SWIG_FLAGS} -DSWIG_TYPE_TABLE=smil)
ENDIF(USE_WRAPPER)




SET(SMIL_SRC_DIRS ${CMAKE_CURRENT_SOURCE_DIR})
SET(SMIL_LIBS)
SET(SWIG_INTERFACE_FILES)


INCLUDE_DIRECTORIES(${CMAKE_CURRENT_SOURCE_DIR}/Core)

FOREACH(_MOD ${MODULES})
	SET(SMIL_SRC_DIRS ${SMIL_SRC_DIRS}
			  ${CMAKE_CURRENT_SOURCE_DIR}/${_MOD} 
			  ${CMAKE_CURRENT_SOURCE_DIR}/${_MOD}/include 
			  ${CMAKE_CURRENT_SOURCE_DIR}/${_MOD}/include/private
			  ${CMAKE_CURRENT_SOURCE_DIR}/${_MOD}/src
			  ${CMAKE_CURRENT_SOURCE_DIR}/${_MOD}/test
			  )
ENDFOREACH(_MOD ${MODULES})


IF(BUILD_DOC)
	ADD_SUBDIRECTORY(doc)
# 	FILE(GLOB DOXY_SWIG_FILES ${CMAKE_CURRENT_BINARY_DIR}/doc/xml/*.i)
# 	SET(SWIG_INTERFACE_FILES ${SWIG_INTERFACE_FILES} ${DOXY_SWIG_FILES})
# 	MESSAGE(${SWIG_INTERFACE_FILES})
ENDIF(BUILD_DOC)

INCLUDE_DIRECTORIES(${PROJECT_BINARY_DIR} ${CMAKE_CURRENT_SOURCE_DIR})

FOREACH(_MOD ${MODULES})
	INCLUDE_DIRECTORIES(${_MOD} ${_MOD}/include ${_MOD}/include/private)
	ADD_SUBDIRECTORY(${_MOD})
	
ENDFOREACH(_MOD ${MODULES})

# Special Types
FOREACH(_IMG_TYPE ${IMAGE_SPECIAL_TYPES})
	SET(_SPEC_TYPE_DIR "${CMAKE_CURRENT_SOURCE_DIR}/NSTypes/${_IMG_TYPE}")
	INCLUDE_DIRECTORIES(${_SPEC_TYPE_DIR} ${_SPEC_TYPE_DIR}/include)
	ADD_SUBDIRECTORY(${_SPEC_TYPE_DIR})
ENDFOREACH(_IMG_TYPE ${IMAGE_SPECIAL_TYPES})


###### ADDONS ######

SET(AVAILABLE_ADDONS)
FILE(GLOB _ADD_CMLISTS RELATIVE "${CMAKE_CURRENT_SOURCE_DIR}/Addons/" "${CMAKE_CURRENT_SOURCE_DIR}/Addons/*/CMakeLists.txt")
FOREACH(_FCH ${_ADD_CMLISTS})
	GET_FILENAME_COMPONENT(_DIR ${_FCH} PATH)
	STRING(TOUPPER ${_DIR} _ADDON)
	LIST(APPEND AVAILABLE_ADDONS ${_DIR})
	OPTION(ADDON_${_ADDON} "Build addon ${_DIR}" OFF)
	MARK_AS_ADVANCED(ADDON_${_ADDON})
	IF(ADDON_${_ADDON})
		INCLUDE_DIRECTORIES("Addons/${_DIR}" "Addons/${_DIR}/include" "Addons/${_DIR}/include/private")
		ADD_SUBDIRECTORY("Addons/${_DIR}")
	ENDIF(ADDON_${_ADDON})
ENDFOREACH(_FCH ${_ADD_CMLISTS})


IF(USE_WRAPPER)
# 	SET(SWIG_INCLUDE_DEFINITIONS)
	SET(SWIG_MAIN_INTERFACE smil.i)
	SET(SWIG_COMMON_INTERFACE smilCommon.i)
	SET_SOURCE_FILES_PROPERTIES(smil.i PROPERTIES GENERATED TRUE)
# 	SET(SWIG_COMMON_I ${CMAKE_CURRENT_BINARY_DIR}/smilCommon.i)

	SET(SWIG_COMMON_INCLUDES)
	IF(EXISTS ${PROJECT_BINARY_DIR}/smilDoc.i)
		SET(SWIG_COMMON_INCLUDES "${SWIG_COMMON_INCLUDES}%include \"smilDoc.i\"\n")
	ENDIF(EXISTS ${PROJECT_BINARY_DIR}/smilDoc.i)
	SET(SWIG_COMMON_INCLUDES "${SWIG_COMMON_INCLUDES}%{\n")
	FOREACH(_IMG_TYPE ${IMAGE_SPECIAL_TYPES})
		SET(SWIG_COMMON_INCLUDES "${SWIG_COMMON_INCLUDES}#include \"NSTypes/${_IMG_TYPE}/include/D${_IMG_TYPE}.h\"\n")
	ENDFOREACH(_IMG_TYPE ${IMAGE_SPECIAL_TYPES})
	SET(SWIG_COMMON_INCLUDES "${SWIG_COMMON_INCLUDES}%}\n")
 
	FOREACH(_SWIG_FILE ${SWIG_INTERFACE_FILES})
		SET(SWIG_INCLUDE_DEFINITIONS "${SWIG_INCLUDE_DEFINITIONS}%import \"${_SWIG_FILE}\"\n")
		GET_FILENAME_COMPONENT(_MOD ${_SWIG_FILE} NAME_WE)
		SET(PYTHON_IMPORT_MODULES "${PYTHON_IMPORT_MODULES}from ${_MOD}Python import *\n")
	ENDFOREACH(_SWIG_FILE ${SWIG_INTERFACE_FILES})
# 
	CONFIGURE_FILE(${CMAKE_CURRENT_SOURCE_DIR}/CMake/_smil.i ${SWIG_MAIN_INTERFACE})
	CONFIGURE_FILE(${CMAKE_CURRENT_SOURCE_DIR}/CMake/_smilCommon.i ${SWIG_COMMON_INTERFACE})

	SET_SOURCE_FILES_PROPERTIES(${SWIG_MAIN_INTERFACE} ${SWIG_COMMON_INTERFACE} PROPERTIES CPLUSPLUS ON)
	IF(WRAP_PYTHON)
		SWIG_ADD_MODULE(smilPython python ${SWIG_MAIN_INTERFACE})
		SWIG_LINK_LIBRARIES(smilPython ${SMIL_LIBS} ${PYTHON_LIBRARIES})
	ENDIF(WRAP_PYTHON)

	IF(WRAP_JAVA)
		SWIG_ADD_MODULE(smilJava java ${SWIG_MAIN_INTERFACE})
		SWIG_LINK_LIBRARIES(smilJava ${SMIL_LIBS})
	ENDIF(WRAP_JAVA)
# 
	IF(WRAP_OCTAVE)
		SWIG_ADD_MODULE(smilOctave octave ${SWIG_MAIN_INTERFACE})
		SET_TARGET_PROPERTIES(smilOctave PROPERTIES PREFIX "" SUFFIX ".oct")
		SWIG_LINK_LIBRARIES(smilOctave ${SMIL_LIBS})
	ENDIF(WRAP_OCTAVE)
# 
	IF(WRAP_RUBY)
		SWIG_ADD_MODULE(smilRuby ruby ${SWIG_MAIN_INTERFACE})
		SET_TARGET_PROPERTIES(smilRuby PROPERTIES PREFIX "")
		SWIG_LINK_LIBRARIES(smilRuby ${SMIL_LIBS})
	ENDIF(WRAP_RUBY)
# 
ENDIF(USE_WRAPPER)

ADD_SMIL_TESTS(Smil smilCore smilIO smilGui smilMorpho ${SMIL_EXT_DEPS})



