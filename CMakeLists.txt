# Copyright (c) 2011, Matthieu FAESSEL and ARMINES
# All rights reserved.
# 
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
#     * Redistributions of source code must retain the above copyright
#       notice, this list of conditions and the following disclaimer.
#     * Redistributions in binary form must reproduce the above copyright
#       notice, this list of conditions and the following disclaimer in the
#       documentation and/or other materials provided with the distribution.
#     * Neither the name of the University of California, Berkeley nor the
#       names of its contributors may be used to endorse or promote products
#       derived from this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS ``AS IS'' AND ANY
# EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDERS AND CONTRIBUTORS BE LIABLE FOR ANY
# DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
# ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

PROJECT(Smil)

CMAKE_MINIMUM_REQUIRED(VERSION 2.6)



LIST(APPEND CMAKE_MODULE_PATH "${CMAKE_CURRENT_SOURCE_DIR}/CMake")
INCLUDE_DIRECTORIES("${CMAKE_CURRENT_SOURCE_DIR}/CMake")
INCLUDE(GenMacros)

SET(SMIL_LIB_PREFIX smil)
SET(SMIL_EXT_DEPS)

###### COMPILATION PATHS ######

IF(NOT LIBRARY_OUTPUT_PATH)
	SET(LIBRARY_OUTPUT_PATH 
		${PROJECT_BINARY_DIR}/lib CACHE PATH 
		"Single output directory for building all libraries."
	)
	MARK_AS_ADVANCED(LIBRARY_OUTPUT_PATH)
ENDIF(NOT LIBRARY_OUTPUT_PATH)



IF(NOT EXECUTABLE_OUTPUT_PATH)
	SET(EXECUTABLE_OUTPUT_PATH 
		${PROJECT_BINARY_DIR}/bin CACHE PATH 
		"Single output directory for building all binaries."
	)
	MARK_AS_ADVANCED(EXECUTABLE_OUTPUT_PATH)
ENDIF(NOT EXECUTABLE_OUTPUT_PATH)


###### BUILD OPTIONS ######

# Default build type : Release
IF(NOT CMAKE_BUILD_TYPE)
	SET(CMAKE_BUILD_TYPE "Release" CACHE STRING "" FORCE)
ENDIF(NOT CMAKE_BUILD_TYPE)

OPTION(BUILD_SHARED_LIBS "Build shared libs" ON)
IF(BUILD_SHARED_LIBS)
	ADD_DEFINITIONS("-DSHARED_LIBS")
ENDIF(BUILD_SHARED_LIBS)

# 64 Bits
SET(USE_64BIT_IDS)
IF(CMAKE_SIZEOF_VOID_P EQUAL 8)
	# 4 -> 32 BITS, 8 -> 64 BITS
	MESSAGE(STATUS "64 bits system detected")
	SET(USE_64BIT_IDS 1)
	ADD_DEFINITIONS("-DUSE_64BIT_IDS")
ELSE(CMAKE_SIZEOF_VOID_P EQUAL 8)
	MESSAGE(STATUS "32 bits system detected")
ENDIF(CMAKE_SIZEOF_VOID_P EQUAL 8)


# ADD_DEFINITIONS("-fPIC")
# ADD_DEFINITIONS("-fPIC -finline-functions")


###### OPTIMIZATIONS ######

OPTION(USE_SSE_INT "Use sse intrinsics" ON)
IF(USE_SSE_INT)
	ADD_DEFINITIONS("-DSMIL_USE_SSE_INT")
ENDIF(USE_SSE_INT)

OPTION(USE_OPTIMIZATION "Use optimizations" ON)
IF(USE_OPTIMIZATION)
	INCLUDE(OptimizeForArchitecture)
#    ADD_DEFINITIONS("-ftree-vectorize -ftree-vectorizer-verbose=1")
#     ADD_DEFINITIONS("-ftree-vectorize -g -ffast-math  -march=core2 -mtune=core2  -msse2 -fdump-tree-optimized")
	OptimizeForArchitecture()
	AddCompilerFlag("-ftree-vectorize -ftree-slp-vectorize")
	MESSAGE(STATUS "Compiler flags: "${CMAKE_CXX_FLAGS})
	OPTION(VERBOSE_OPTIMIZATION "Show verbose optimizations" OFF)
	IF(VERBOSE_OPTIMIZATION)
		ADD_DEFINITIONS("-ftree-vectorizer-verbose=1")
	ENDIF(VERBOSE_OPTIMIZATION)
ENDIF(USE_OPTIMIZATION)



OPTION(USE_OPEN_MP "Use OpenMP parallelization" OFF)
IF(USE_OPEN_MP)
    ADD_DEFINITIONS("-DSMIL_USE_OPEN_MP -fopenmp")
    LIST(APPEND SMIL_EXT_DEPS gomp pthread)
ENDIF(USE_OPEN_MP)


###### WRAPPING ######

OPTION(WRAP_PYTHON "Wrap Python" FALSE)
IF(WRAP_PYTHON)
      FIND_PACKAGE(PythonLibs REQUIRED)
      INCLUDE_DIRECTORIES(${PYTHON_INCLUDE_PATH})
      
#       CONFIGURE_FILE(${CMAKE_CURRENT_SOURCE_DIR}/CMake/_smil.py ${LIBRARY_OUTPUT_PATH}/smil.py COPYONLY)
ENDIF(WRAP_PYTHON)

# SET(SMIL_EXT_DEPS ${SMIL_EXT_DEPS} python2.7)

OPTION(WRAP_JAVA "Wrap Java" FALSE)
IF(WRAP_JAVA)
      FIND_PACKAGE(JNI REQUIRED)
      INCLUDE_DIRECTORIES(${JNI_INCLUDE_DIRS})
ENDIF(WRAP_JAVA)

OPTION(WRAP_OCTAVE "Wrap Octave" FALSE)
IF(WRAP_OCTAVE)
ENDIF(WRAP_OCTAVE)

IF(WRAP_PYTHON OR WRAP_JAVA)
      FIND_PACKAGE(SWIG REQUIRED)
      SET(CMAKE_SWIG_OUTDIR ${LIBRARY_OUTPUT_PATH})

      INCLUDE(${SWIG_USE_FILE})
ENDIF(WRAP_PYTHON OR WRAP_JAVA)


###### GUI ######

OPTION(BUILD_GUI "Build GUI (requires Qt)" ON)
IF(BUILD_GUI)
      FIND_PACKAGE(Qt4 REQUIRED)
      INCLUDE(${QT_USE_FILE})
      INCLUDE_DIRECTORIES(${QT_INCLUDES})
      LINK_DIRECTORIES(${QT_LIBRARY_DIRS})
      ADD_DEFINITIONS(${QT_DEFINITIONS} -DBUILD_GUI)
      LIST(APPEND SMIL_EXT_DEPS ${QT_LIBRARIES})
ENDIF(BUILD_GUI)


###### IO ######

OPTION(USE_PNG "Use PNG" ON)
IF(USE_PNG)
	ADD_DEFINITIONS("-DUSE_PNG")
	FIND_PACKAGE(PNG)
	INCLUDE_DIRECTORIES(${PNG_INCLUDE_DIR})
	LINK_DIRECTORIES(${PNG_LIBRARY})
	LIST(APPEND SMIL_EXT_DEPS ${PNG_LIBRARIES})
ENDIF(USE_PNG)


###### DOC ######

OPTION(BUILD_DOC "Generate documentation" OFF)

###### TESTS ######

OPTION(BUILD_TEST "Build tests" OFF)
IF(BUILD_TEST)
	ENABLE_TESTING()
ENDIF(BUILD_TEST)



###### IMAGE TYPES WRAPPED ######

# SET(IMAGE_TYPES "UINT8;UINT16" CACHE STRING "Image types compiled")
SET(IMAGE_TYPES "UINT8" CACHE STRING "Image types compiled")
SET(IMAGE_TYPES_STR)

SET(_STWD)
SET(_SIT)

FOREACH(_IMG_TYPE ${IMAGE_TYPES})
	ADD_DEFINITIONS("-DSMIL_WRAP_${_IMG_TYPE}")
ENDFOREACH(_IMG_TYPE ${IMAGE_TYPES})

# SWIG WRAP CLASS
SET(_STWD "${_STWD}%define TEMPLATE_WRAP_CLASS(_class)\n")
FOREACH(_IMG_TYPE ${IMAGE_TYPES})
	SET(IMAGE_TYPES_STR ${IMAGE_TYPES_STR}${_IMG_TYPE},)
	SET(_SIT ${_SIT}Image_${_IMG_TYPE},)
	SET(_STWD "${_STWD}  %template(_class \#\# _${_IMG_TYPE}) _class<${_IMG_TYPE}>;\n")
ENDFOREACH(_IMG_TYPE ${IMAGE_TYPES})
SET(_STWD "${_STWD}%enddef\n\n")

# SWIG WRAP FUNC
SET(_STWD "${_STWD}%define TEMPLATE_WRAP_FUNC(func)\n")
FOREACH(_IMG_TYPE ${IMAGE_TYPES})
	SET(_STWD "${_STWD}  %template(func) func<${_IMG_TYPE}>;\n")
ENDFOREACH(_IMG_TYPE ${IMAGE_TYPES})
SET(_STWD "${_STWD}%enddef\n\n")

# SWIG WRAP CROSS FUNC 2 IMGS
SET(_STWD "${_STWD}%define TEMPLATE_WRAP_FUNC_CROSS2(func)\n")
FOREACH(_IMG_TYPE ${IMAGE_TYPES})
	FOREACH(_IMG_TYPE2 ${IMAGE_TYPES})
		SET(_STWD "${_STWD}  %template(func) func<${_IMG_TYPE},${_IMG_TYPE2}>;\n")
	ENDFOREACH(_IMG_TYPE2 ${IMAGE_TYPES})
ENDFOREACH(_IMG_TYPE ${IMAGE_TYPES})
SET(_STWD "${_STWD}%enddef\n\n")

STRING(REGEX REPLACE ",$" "" IMAGE_TYPES_STR ${IMAGE_TYPES_STR})

SET(SWIG_TEMPLATE_WRAP_DEFINITIONS ${_STWD})
SET(SWIG_IMAGE_TYPES "imageTypes = ( ${_SIT} )")


MESSAGE(STATUS "Image types generated: ${IMAGE_TYPES_STR}")



SET(MODULES	Core
		Gui
		IO
		Morpho
)


SET(SMIL_SRC_DIRS ${CMAKE_CURRENT_SOURCE_DIR})
SET(SMIL_LIBS)
SET(SWIG_INTERFACE_FILES)


FOREACH(_MOD ${MODULES})
	SET(SMIL_SRC_DIRS ${SMIL_SRC_DIRS}
			  ${CMAKE_CURRENT_SOURCE_DIR}/${_MOD} 
			  ${CMAKE_CURRENT_SOURCE_DIR}/${_MOD}/include 
			  ${CMAKE_CURRENT_SOURCE_DIR}/${_MOD}/include/private
			  ${CMAKE_CURRENT_SOURCE_DIR}/${_MOD}/src
			  ${CMAKE_CURRENT_SOURCE_DIR}/${_MOD}/test
			  )
ENDFOREACH(_MOD ${MODULES})


IF(BUILD_DOC)
	ADD_SUBDIRECTORY(doc)
# 	FILE(GLOB DOXY_SWIG_FILES ${CMAKE_CURRENT_BINARY_DIR}/doc/xml/*.i)
# 	SET(SWIG_INTERFACE_FILES ${SWIG_INTERFACE_FILES} ${DOXY_SWIG_FILES})
# 	MESSAGE(${SWIG_INTERFACE_FILES})
ENDIF(BUILD_DOC)


INCLUDE_DIRECTORIES(${PROJECT_BINARY_DIR})

FOREACH(_MOD ${MODULES})
	INCLUDE_DIRECTORIES(${_MOD} ${_MOD}/include ${_MOD}/include/private)
	ADD_SUBDIRECTORY(${_MOD})
	
ENDFOREACH(_MOD ${MODULES})



IF(WRAP_PYTHON OR WRAP_JAVA OR WRAP_OCTAVE)
# 	SET(SWIG_INCLUDE_DEFINITIONS)
	SET(SWIG_MAIN_INTERFACE ${CMAKE_CURRENT_BINARY_DIR}/smil.i)
	SET(SWIG_COMMON_INTERFACE ${CMAKE_CURRENT_BINARY_DIR}/smilCommon.i)
# 	SET(SWIG_COMMON_I ${CMAKE_CURRENT_BINARY_DIR}/smilCommon.i)
# 
	SET(SWIG_COMMON_INCLUDES)
	IF(EXISTS ${PROJECT_BINARY_DIR}/smilDoc.i)
		SET(SWIG_COMMON_INCLUDES "${SWIG_COMMON_INCLUDES}%include \"smilDoc.i\"\n")
	ENDIF(EXISTS ${PROJECT_BINARY_DIR}/smilDoc.i)
# 
	FOREACH(_SWIG_FILE ${SWIG_INTERFACE_FILES})
		SET(SWIG_INCLUDE_DEFINITIONS "${SWIG_INCLUDE_DEFINITIONS}%import \"${_SWIG_FILE}\"\n")
		GET_FILENAME_COMPONENT(_MOD ${_SWIG_FILE} NAME_WE)
		SET(PYTHON_IMPORT_MODULES "${PYTHON_IMPORT_MODULES}from ${_MOD}Python import *\n")
	ENDFOREACH(_SWIG_FILE ${SWIG_INTERFACE_FILES})
# 
	CONFIGURE_FILE(${CMAKE_CURRENT_SOURCE_DIR}/CMake/_smil.i ${SWIG_MAIN_INTERFACE})
	CONFIGURE_FILE(${CMAKE_CURRENT_SOURCE_DIR}/CMake/_smilCommon.i ${SWIG_COMMON_INTERFACE})

	SET_SOURCE_FILES_PROPERTIES(${SWIG_MAIN_INTERFACE} ${SWIG_COMMON_INTERFACE} PROPERTIES CPLUSPLUS ON)
# 	SET_SOURCE_FILES_PROPERTIES(smil.i Core/smilCore.i PROPERTIES CPLUSPLUS ON)
# 	SET_SOURCE_FILES_PROPERTIES(smilCommon.i PROPERTIES CPLUSPLUS ON)
# 
# 	CONFIGURE_FILE(${CMAKE_CURRENT_SOURCE_DIR}/CMake/_smilCommon.i ${SWIG_COMMON_I})
# 	SET_SOURCE_FILES_PROPERTIES(${SWIG_COMMON_I} PROPERTIES CPLUSPLUS ON)
# 	
# 		  
	IF(WRAP_PYTHON)
		SWIG_ADD_MODULE(smilPython python ${SWIG_MAIN_INTERFACE})
		SWIG_LINK_LIBRARIES(smilPython ${SMIL_LIBS} ${PYTHON_LIBRARIES})
	ENDIF(WRAP_PYTHON)

	IF(WRAP_JAVA)
		SWIG_ADD_MODULE(smilJava java ${SWIG_MAIN_INTERFACE})
		SWIG_LINK_LIBRARIES(smilJava ${SMIL_LIBS})
	ENDIF(WRAP_JAVA)
# 
	IF(WRAP_OCTAVE)
		SWIG_ADD_MODULE(smilOctave octave ${SWIG_MAIN_INTERFACE})
		SET_TARGET_PROPERTIES(smilOctave PROPERTIES PREFIX "" SUFFIX ".oct")
		SWIG_LINK_LIBRARIES(smilOctave ${SMIL_LIBS})
	ENDIF(WRAP_OCTAVE)
# 
ENDIF(WRAP_PYTHON OR WRAP_JAVA OR WRAP_OCTAVE)

ADD_SMIL_TESTS(Smil ${SMIL_LIBS} smilCore smilIO smilGui ${SMIL_EXT_DEPS})



