PROJECT(Smil)


CMAKE_MINIMUM_REQUIRED(VERSION 2.6)


LIST(APPEND CMAKE_MODULE_PATH "${CMAKE_CURRENT_SOURCE_DIR}/DCore/cmake")
INCLUDE(OptimizeForArchitecture)

###### COMPILATION PATHS ######

IF(NOT LIBRARY_OUTPUT_PATH)
	SET(LIBRARY_OUTPUT_PATH 
		${PROJECT_BINARY_DIR}/lib CACHE PATH 
		"Single output directory for building all libraries."
	)
	MARK_AS_ADVANCED(LIBRARY_OUTPUT_PATH)
ENDIF(NOT LIBRARY_OUTPUT_PATH)



IF(NOT EXECUTABLE_OUTPUT_PATH)
	SET(EXECUTABLE_OUTPUT_PATH 
		${PROJECT_BINARY_DIR}/bin CACHE PATH 
		"Single output directory for building all binaries."
	)
	MARK_AS_ADVANCED(EXECUTABLE_OUTPUT_PATH)
ENDIF(NOT EXECUTABLE_OUTPUT_PATH)

OPTION(USE_OPTIMIZATION "Use optimizations" ON)
IF(USE_OPTIMIZATION)
#    ADD_DEFINITIONS("-ftree-vectorize -ftree-vectorizer-verbose=1")
#     ADD_DEFINITIONS("-ftree-vectorize -g -ffast-math  -march=core2 -mtune=core2  -msse2 -fdump-tree-optimized")
	OptimizeForArchitecture()
	AddCompilerFlag("-ftree-vectorize -ftree-slp-vectorize")
	MESSAGE(STATUS "Compiler flags: "${CMAKE_CXX_FLAGS})
	OPTION(VERBOSE_OPTIMIZATION "Show verbose optimizations" OFF)
	IF(VERBOSE_OPTIMIZATION)
		ADD_DEFINITIONS("-ftree-vectorizer-verbose=5")
	ENDIF(VERBOSE_OPTIMIZATION)
ENDIF(USE_OPTIMIZATION)


OPTION(BUILD_SHARED_LIBS "Build shared libs" ON)
IF(BUILD_SHARED_LIBS)
	ADD_DEFINITIONS("-DSHARED_LIBS")
ENDIF(BUILD_SHARED_LIBS)


OPTION(USE_OPEN_MP "Use OpenMP parallelization" OFF)
IF(USE_OPEN_MP)
    ADD_DEFINITIONS("-DMB_USE_OPEN_MP -fopenmp")
    LIST(APPEND MB_EXTERNAL_DEPS gomp pthread)
ENDIF(USE_OPEN_MP)


OPTION(WRAP_PYTHON "Wrap Python" FALSE)
IF(WRAP_PYTHON)
      FIND_PACKAGE(PythonLibs)
      INCLUDE_DIRECTORIES(${PYTHON_INCLUDE_PATH})
      CONFIGURE_FILE(${CMAKE_CURRENT_SOURCE_DIR}/DCore/cmake/_smil.py ${LIBRARY_OUTPUT_PATH}/smil.py COPYONLY)
ENDIF(WRAP_PYTHON)

OPTION(WRAP_JAVA "Wrap Java" FALSE)

IF(WRAP_PYTHON OR WRAP_JAVA)
      FIND_PACKAGE(SWIG REQUIRED)
      SET(CMAKE_SWIG_OUTDIR ${LIBRARY_OUTPUT_PATH})

      INCLUDE(${SWIG_USE_FILE})
ENDIF(WRAP_PYTHON OR WRAP_JAVA)

ADD_DEFINITIONS("-fPIC")


OPTION(USE_QT "Use Qt for GUI" OFF)
IF(USE_QT)
      FIND_PACKAGE(Qt4 REQUIRED)
      INCLUDE(${QT_USE_FILE})
      INCLUDE_DIRECTORIES(${QT_INCLUDES})
      LINK_DIRECTORIES(${QT_LIBRARY_DIRS})
      ADD_DEFINITIONS(${QT_DEFINITIONS} -DUSE_QT)
      LIST(APPEND EXTERNAL_DEPS ${QT_LIBRARIES})
ENDIF(USE_QT)

OPTION(USE_PNG "Use PNG" ON)
IF(USE_PNG)
	ADD_DEFINITIONS("-DUSE_PNG")
	FIND_PACKAGE(PNG)
	INCLUDE_DIRECTORIES(${PNG_INCLUDE_DIR})
	LINK_DIRECTORIES(${PNG_LIBRARY})
	LIST(APPEND EXTERNAL_DEPS ${PNG_LIBRARIES})
ENDIF(USE_PNG)


OPTION(BUILD_TEST "Build tests" OFF)
IF(BUILD_TEST)
	ENABLE_TESTING()
ENDIF(BUILD_TEST)




SET(MODULES	Core
		Morpho
)

FOREACH(_MOD ${MODULES})
	SET(MOD D${_MOD})
	INCLUDE_DIRECTORIES(${MOD} ${MOD}/include ${MOD}/include/private)
	ADD_SUBDIRECTORY(${MOD})
	
	IF(BUILD_TEST)
		FILE(GLOB TEST_SOURCE_FILES RELATIVE ${CMAKE_CURRENT_SOURCE_DIR}  ${MOD}/test/*.cpp)

		FOREACH(_SRC ${TEST_SOURCE_FILES})
			STRING(REPLACE ".cpp" "" TEST_EXE_NAME ${_SRC})
			STRING(REPLACE "${MOD}/test/" "" TEST_EXE_NAME ${TEST_EXE_NAME})
			ADD_EXECUTABLE(${TEST_EXE_NAME} ${_SRC})
			TARGET_LINK_LIBRARIES(${TEST_EXE_NAME} smil${_MOD})
			ADD_TEST("${_MOD}_${TEST_EXE_NAME}" ${EXECUTABLE_OUTPUT_PATH}/${TEST_EXE_NAME})
		ENDFOREACH(_SRC ${TEST_SOURCE_FILES})
	ENDIF(BUILD_TEST)
ENDFOREACH(_MOD ${MODULES})



