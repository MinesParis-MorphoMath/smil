
PROJECT(Smil)

CMAKE_MINIMUM_REQUIRED(VERSION 2.6)



LIST(APPEND CMAKE_MODULE_PATH "${CMAKE_CURRENT_SOURCE_DIR}/CMake")
INCLUDE_DIRECTORIES("${CMAKE_CURRENT_SOURCE_DIR}/CMake")
INCLUDE(GenMacros)

SET(SMIL_LIB_PREFIX smil)
SET(SMIL_EXT_DEPS)

###### COMPILATION PATHS ######

IF(NOT LIBRARY_OUTPUT_PATH)
	SET(LIBRARY_OUTPUT_PATH 
		${PROJECT_BINARY_DIR}/lib CACHE PATH 
		"Single output directory for building all libraries."
	)
	MARK_AS_ADVANCED(LIBRARY_OUTPUT_PATH)
ENDIF(NOT LIBRARY_OUTPUT_PATH)



IF(NOT EXECUTABLE_OUTPUT_PATH)
	SET(EXECUTABLE_OUTPUT_PATH 
		${PROJECT_BINARY_DIR}/bin CACHE PATH 
		"Single output directory for building all binaries."
	)
	MARK_AS_ADVANCED(EXECUTABLE_OUTPUT_PATH)
ENDIF(NOT EXECUTABLE_OUTPUT_PATH)


###### BUILD OPTIONS ######

# Default build type : Release
IF(NOT CMAKE_BUILD_TYPE)
	SET(CMAKE_BUILD_TYPE "Release" CACHE STRING "" FORCE)
ENDIF(NOT CMAKE_BUILD_TYPE)

OPTION(BUILD_SHARED_LIBS "Build shared libs" ON)
IF(BUILD_SHARED_LIBS)
	ADD_DEFINITIONS("-DSHARED_LIBS")
ENDIF(BUILD_SHARED_LIBS)

ADD_DEFINITIONS("-fPIC")
# ADD_DEFINITIONS("-fPIC -finline-functions")


###### OPTIMIZATIONS ######

OPTION(USE_OPTIMIZATION "Use optimizations" ON)
IF(USE_OPTIMIZATION)
	INCLUDE(OptimizeForArchitecture)
#    ADD_DEFINITIONS("-ftree-vectorize -ftree-vectorizer-verbose=1")
#     ADD_DEFINITIONS("-ftree-vectorize -g -ffast-math  -march=core2 -mtune=core2  -msse2 -fdump-tree-optimized")
	OptimizeForArchitecture()
	AddCompilerFlag("-ftree-vectorize -ftree-slp-vectorize")
	MESSAGE(STATUS "Compiler flags: "${CMAKE_CXX_FLAGS})
	OPTION(VERBOSE_OPTIMIZATION "Show verbose optimizations" OFF)
	IF(VERBOSE_OPTIMIZATION)
		ADD_DEFINITIONS("-ftree-vectorizer-verbose=5")
	ENDIF(VERBOSE_OPTIMIZATION)
ENDIF(USE_OPTIMIZATION)



OPTION(USE_OPEN_MP "Use OpenMP parallelization" OFF)
IF(USE_OPEN_MP)
    ADD_DEFINITIONS("-DMB_USE_OPEN_MP -fopenmp")
    LIST(APPEND MB_EXTERNAL_DEPS gomp pthread)
ENDIF(USE_OPEN_MP)


###### WRAPPING ######

OPTION(WRAP_PYTHON "Wrap Python" FALSE)
IF(WRAP_PYTHON)
      FIND_PACKAGE(PythonLibs REQUIRED)
      INCLUDE_DIRECTORIES(${PYTHON_INCLUDE_PATH})
      
#       CONFIGURE_FILE(${CMAKE_CURRENT_SOURCE_DIR}/CMake/_smil.py ${LIBRARY_OUTPUT_PATH}/smil.py COPYONLY)
ENDIF(WRAP_PYTHON)

OPTION(WRAP_JAVA "Wrap Java" FALSE)
IF(WRAP_JAVA)
      FIND_PACKAGE(JNI REQUIRED)
      INCLUDE_DIRECTORIES(${JNI_INCLUDE_DIRS})
ENDIF(WRAP_JAVA)

IF(WRAP_PYTHON OR WRAP_JAVA)
      FIND_PACKAGE(SWIG REQUIRED)
      SET(CMAKE_SWIG_OUTDIR ${LIBRARY_OUTPUT_PATH})

      INCLUDE(${SWIG_USE_FILE})
ENDIF(WRAP_PYTHON OR WRAP_JAVA)


###### GUI ######

OPTION(BUILD_GUI "Build GUI (requires Qt)" ON)
IF(BUILD_GUI)
      FIND_PACKAGE(Qt4 REQUIRED)
      INCLUDE(${QT_USE_FILE})
      INCLUDE_DIRECTORIES(${QT_INCLUDES})
      LINK_DIRECTORIES(${QT_LIBRARY_DIRS})
      ADD_DEFINITIONS(${QT_DEFINITIONS} -DBUILD_GUI)
      LIST(APPEND SMIL_EXT_DEPS ${QT_LIBRARIES})
ENDIF(BUILD_GUI)


###### IO ######

OPTION(USE_PNG "Use PNG" ON)
IF(USE_PNG)
	ADD_DEFINITIONS("-DUSE_PNG")
	FIND_PACKAGE(PNG)
	INCLUDE_DIRECTORIES(${PNG_INCLUDE_DIR})
	LINK_DIRECTORIES(${PNG_LIBRARY})
	LIST(APPEND SMIL_EXT_DEPS ${PNG_LIBRARIES})
ENDIF(USE_PNG)


###### TESTS ######

OPTION(BUILD_TEST "Build tests" OFF)
IF(BUILD_TEST)
	ENABLE_TESTING()
ENDIF(BUILD_TEST)



###### IMAGE TYPES WRAPPED ######

# SET(IMAGE_TYPES "UINT8;UINT16" CACHE STRING "Image types compiled")
SET(IMAGE_TYPES "UINT8" CACHE STRING "Image types compiled")
SET(IMAGE_TYPES_STR)

SET(_STWD)
SET(_SIT)

# SWIG WRAP CLASS
SET(_STWD "${_STWD}%define TEMPLATE_WRAP_CLASS(_class)\n")
FOREACH(_IMG_TYPE ${IMAGE_TYPES})
	SET(IMAGE_TYPES_STR ${IMAGE_TYPES_STR}${_IMG_TYPE},)
	SET(_SIT ${_SIT}Image_${_IMG_TYPE},)
	SET(_STWD "${_STWD}  %template(_class \#\# _${_IMG_TYPE}) _class<${_IMG_TYPE}>;\n")
ENDFOREACH(_IMG_TYPE ${IMAGE_TYPES})
SET(_STWD "${_STWD}%enddef\n\n")

# SWIG WRAP FUNC
SET(_STWD "${_STWD}%define TEMPLATE_WRAP_FUNC(func)\n")
FOREACH(_IMG_TYPE ${IMAGE_TYPES})
	SET(_STWD "${_STWD}  %template(func) func<${_IMG_TYPE}>;\n")
ENDFOREACH(_IMG_TYPE ${IMAGE_TYPES})
SET(_STWD "${_STWD}%enddef\n\n")

# SWIG WRAP CROSS FUNC 2 IMGS
SET(_STWD "${_STWD}%define TEMPLATE_WRAP_FUNC_CROSS2(func)\n")
FOREACH(_IMG_TYPE ${IMAGE_TYPES})
	FOREACH(_IMG_TYPE2 ${IMAGE_TYPES})
		SET(_STWD "${_STWD}  %template(func) func<${_IMG_TYPE},${_IMG_TYPE2}>;\n")
	ENDFOREACH(_IMG_TYPE2 ${IMAGE_TYPES})
ENDFOREACH(_IMG_TYPE ${IMAGE_TYPES})
SET(_STWD "${_STWD}%enddef\n\n")

STRING(REGEX REPLACE ",$" "" IMAGE_TYPES_STR ${IMAGE_TYPES_STR})

SET(SWIG_TEMPLATE_WRAP_DEFINITIONS ${_STWD})
SET(SWIG_IMAGE_TYPES "imageTypes = ( ${_SIT} )")


MESSAGE(STATUS "Image types generated: ${IMAGE_TYPES_STR}")



SET(MODULES	Core
		Gui
		IO
		Morpho
)




SET(SMIL_LIBS)
SET(SWIG_INTERFACE_FILES)

FOREACH(_MOD ${MODULES})
	INCLUDE_DIRECTORIES(${_MOD} ${_MOD}/include ${_MOD}/include/private)
	ADD_SUBDIRECTORY(${_MOD})
	
ENDFOREACH(_MOD ${MODULES})

IF(WRAP_PYTHON OR WRAP_JAVA)
# 	SET(CMAKE_SWIG_FLAGS "-outdir ${LIBRARY_OUTPUT_PATH}/java")
	SET(SWIG_INCLUDE_DEFINITIONS)
	SET(SWIG_MAIN ${CMAKE_CURRENT_BINARY_DIR}/smil.i)

	FOREACH(_SWIG_FILE ${SWIG_INTERFACE_FILES})
		SET(SWIG_INCLUDE_DEFINITIONS "${SWIG_INCLUDE_DEFINITIONS}%include \"${_SWIG_FILE}\"\n")
	ENDFOREACH(_SWIG_FILE ${SWIG_INTERFACE_FILES})

	CONFIGURE_FILE(${CMAKE_CURRENT_SOURCE_DIR}/CMake/_smil.i ${SWIG_MAIN})
	SET_SOURCE_FILES_PROPERTIES(${SWIG_INTERFACE_FILES} ${SWIG_MAIN} PROPERTIES CPLUSPLUS ON)
		  
	IF(WRAP_PYTHON)
		SWIG_ADD_MODULE(smilPython python ${SWIG_MAIN})
		SWIG_LINK_LIBRARIES(smilPython ${SMIL_LIBS})
		SET_TARGET_PROPERTIES(_smilPython PROPERTIES LINKER_LANGUAGE CXX)
	ENDIF(WRAP_PYTHON)
	IF(WRAP_JAVA)
		SWIG_ADD_MODULE(smilJava java ${SWIG_MAIN})
		SWIG_LINK_LIBRARIES(smilJava ${SMIL_LIBS})
	ENDIF(WRAP_JAVA)

ENDIF(WRAP_PYTHON OR WRAP_JAVA)

ADD_SMIL_TESTS(Smil ${SMIL_LIBS})


