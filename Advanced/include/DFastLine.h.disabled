#ifndef __FAST_LINE_HPP__
#define __FAST_LINE_HPP__

#include "Core/include/DCore.h"
#include "Morpho/include/DMorpho.h"

namespace smil
{


  /** @cond */


  //*************************************************
  // SOILLE 'S ALGORITHM
  //*************************************************

  /** @brief oldLineDilate() : the Structuring Element is a segment of length
   * <b>(2 * hLen + 1)</b> pixels and an orientation of <b>angle</b> degrees
   * @param[in]  imIn : input image
   * @param[in]  angle : (in degres)
   * @param[in]  hLen : Half Length of the Structuring Element
   * @param[out] imOut : output image
   */
  template <class T>
  RES_T oldLineDilate(const Image<T> &imIn, const int angle, const int hLen,
                   Image<T> &imOut)
  {
    return lineDilate_Soille(imIn, angle, hLen, imOut);
  }

  /** @brief oldLineErode() : the Structuring Element is a segment of length
   * <b>(2 * hLen + 1)</b> pixels and an orientation <b>angle</b> degrees
   * @param[in]  imIn : input image
   * @param[in]  angle : (in degres)
   * @param[in]  hLen : Half Length of the Structuring Element
   * @param[out] imOut : Result
   */
  template <class T>
  RES_T oldLineErode(const Image<T> &imIn, const int angle, const int hLen,
                  Image<T> &imOut)
  {
    return lineErode_Soille(imIn, angle, hLen, imOut);
  }

  /** @brief oldLineOpen() : the Structuring Element is a segment of length
   * <b>(2 * hLen + 1)</b> pixels and an orientation of <b>angle</b> degrees
   * @param[in]  imIn : input image
   * @param[in]  angle : (in degres)
   * @param[in]  hLen : Half Length of the Structuring Element
   * @param[out] imOut : output image
   */
  template <class T>
  RES_T oldLineOpen(const Image<T> &imIn, const int angle, const int hLen,
                 Image<T> &imOut)
  {
    return lineOpen_Soille(imIn, angle, hLen, imOut);
  }

  /** @brief oldLineClose() : the Structuring Element is a segment of length
   * <b>(2 * hLen + 1)</b> pixels and an orientation of <b>angle</b> degrees
   * @param[in]  imIn : input image
   * @param[in]  angle : (in degres)
   * @param[in]  hLen : Half Length of the Structuring Element
   * @param[out] imOut : output image
   */
  template <class T>
  RES_T oldLineClose(const Image<T> &imIn, const int angle, const int hLen,
                  Image<T> &imOut)
  {
    return lineClose_Soille(imIn, angle, hLen, imOut);
  }

  /**
   * @brief oldSquareErode() : the SE is a square which side is <b>(2 * hSide +
   * 1)</b>
   * @param[in]  imIn : input image
   * @param[in]  hSide : Half side of the Structuring Element
   * @param[out] imOut : output image
   */
  template <class T>
  RES_T oldSquareErode(const Image<T> &imIn, const int hSide, Image<T> &imOut)
  {
    return squareErode_Soille(imIn, hSide, imOut);
  }

  /**
   * @brief oldSquareDilate() : the SE is a square which side is <b>(2 * hSide +
   * 1)</b>
   * @param[in]  imIn : input image
   * @param[in]  hSide : Half side of the Structuring Element
   * @param[out] imOut : output image
   */
  template <class T>
  RES_T oldSquareDilate(const Image<T> &imIn, const int hSide, Image<T> &imOut)
  {
    return squareDilate_Soille(imIn, hSide, imOut);
  }

  /**
   * @brief oldSquareOpen() : the SE is a square which side is <b>(2 * hSide +
   * 1)</b>
   * @param[in]  imIn : input image
   * @param[in]  hSide : Half side of the Structuring Element
   * @param[out] imOut : output image
   */
  template <class T>
  RES_T oldSquareOpen(const Image<T> &imIn, const int hSide, Image<T> &imOut)
  {
    return squareOpen_Soille(imIn, hSide, imOut);
  }

  /**
   * @brief oldSquareClose() : the SE is a square which side is <b>(2 * hSide +
   * 1)</b>
   * @param[in]  imIn : input image
   * @param[in]  hSide : Half side of the Structuring Element
   * @param[out] imOut : output image
   */
  template <class T>
  RES_T oldSquareClose(const Image<T> &imIn, const int hSide, Image<T> &imOut)
  {
    return squareClose_Soille(imIn, hSide, imOut);
  }

  /** @brief oldCircleDilate() : the SE is a <b>disk</b> of radius <b>radius</b>
   * pixels
   *
   * @param[in]  imIn : input image
   * @param[in]  radius : the diameter of the disk will be <b>2 * radius + 1</b>
   * @param[out] imOut : output image
   */
  template <class T>
  RES_T oldCircleDilate(const Image<T> &imIn, const int radius, Image<T> &imOut)
  {
    return circleDilate_Soille(imIn, radius, imOut);
  }

  /** @brief oldCircleErode() : the SE is a <b>disk</b> of radius <b>radius</b>
   * pixels
   *
   * @param[in]  imIn : input image
   * @param[in]  radius : the diameter of the disk will be <b>2 * radius + 1</b>
   * @param[out] imOut : output image
   */
  template <class T>
  RES_T oldCircleErode(const Image<T> &imIn, const int radius, Image<T> &imOut)
  {
    return circleErode_Soille(imIn, radius, imOut);
  }

  /** @brief oldCircleOpen() : the SE is a <b>disk</b> of radius <b>radius</b>
   * pixels
   *
   * @param[in]  imIn : input image
   * @param[in]  radius : the diameter of the disk will be <b>2 * radius + 1</b>
   * @param[out] imOut : output image
   */
  template <class T>
  RES_T oldCircleOpen(const Image<T> &imIn, const int radius, Image<T> &imOut)
  {
    return circleOpen_Soille(imIn, radius, imOut);
  }

  /** @brief oldCircleClose() : the SE is a <b>disk</b> of radius <b>radius</b>
   * pixels
   *
   * @param[in]  imIn : input image
   * @param[in]  radius : the diameter of the disk will be <b>2 * radius + 1</b>
   * @param[out] imOut : output image
   */
  template <class T>
  RES_T oldCircleClose(const Image<T> &imIn, const int radius, Image<T> &imOut)
  {
    return circleClose_Soille(imIn, radius, imOut);
  }

  //*************************************************
  // MORARD 'S ALGORITHM
  //*************************************************
  /** @brief imFastLineOpen() : the Structuring Element is a segment of
   * length <b>(2 * hLen + 1)</b> pixels and an orientation <b>angle</b>
   * @param[in]  imIn : input image
   * @param[in]  angle : (in degres)
   * @param[in]  hLen : Half Length of the Structuring Element
   * @param[out] imOut : output image
   */
  template <class T>
  RES_T imFastLineOpen(const Image<T> &imIn, const int angle, const int hLen,
                       Image<T> &imOut);

  /** @brief imFastLineClose() : the Structuring Element is a segment of
   * length <b>(2 * hLen + 1)</b> pixels and an orientation <b>angle</b>
   * @param[in]  imIn : input image
   * @param[in]  angle : (in degres)
   * @param[in]  hLen : Half Length of the Structuring Element
   * @param[out] imOut : output image
   */
  template <class T>
  RES_T imFastLineClose(const Image<T> &imIn, const int angle, const int hLen,
                        Image<T> &imOut)
  {
    RES_T    r;
    Image<T> imTmp(imIn);

    inv(imIn, imTmp);

    r = imFastLineOpen(imTmp, angle, hLen, imOut);
    if (r == RES_OK)
      return inv(imOut, imOut);
    return RES_ERR;
  }

#if 0
   template <class T>
   RES_T ImFastLineClose_Morard(const Image<T> &imIn, const int angle,
                                    const int radius, Image<T> &imOut);
#endif

#if 0
  /** @brief ImFastLineMaxXXX_Morard() : the SE is a segment of a radius
   * <b>radius</b> pixels and an orientation of angle. We take the supremum of the
   * openings
   * @param[in]  imIn : input image
   * @param[in]  nbAngle : nomber of opening (if nbAngle == 90 => every 2
   * degrees)
   * @param[in]  hLen : Half Length of the Structuring Element
   * @param[out] imOut : output image
   */
   template <class T>
   RES_T ImFastLineMaxOpen_Morard(const Image<T> &imIn,
                                      const int nbAngle, const int radius,
                                      Image<T> &imOut);
   template <class T>
   RES_T ImFastLineMaxClose_Morard(const Image<T> &imIn,
                                       const int nbAngle, const int radius,
                                       Image<T> &imOut);
   template <class T>
   RES_T ImFastLineMaxOpenOrientation_Morard(const Image<T> &imIn,
                                                 const int nbAngle,
                                                 const int radius,
                                                 Image<T> &imOut);

  /** @brief ImFastGranulo() : the SE is a <b>disk</b> of radius <b>radius</b> pixels
   *
   * @param[in]  imIn : input image
   * @param[in]  radius : the diameter of the disk will be <b>2 * radius + 1</b>
   * @param[out] imOut : output image
   */
   template <class T>
   RES_T ImFastGranulo(const Image<T> &imIn, const int angle,
                           UINT32 **granulo, int *sizeGranulo);
   template <class T>
   RES_T i_ImFastGranulo(const Image<T> &imIn, const int angle,
                             char *szFileName);
   template <class T>
   RES_T ii_ImFastGranuloBench(const Image<T> &imIn, const int angle);
   template <class T>
   RES_T ImFastRadialGranulo(const Image<T> &imIn, const int nbAngle,
                                 const int sizeMax, Image<T> &imOut);
   template <class T>
   RES_T i_ImFastGranuloAllDir(const Image<T> &imIn,
                                   const int nbAngle, char *szFileName);

#endif

#if 0
  /** @brief ImFastLineMaxXXX() : the SE is a segment of a radius <b>radius</b>
   * pixels and an orientation of angle. We take the supremum of the openings
   *
   * @param[in]  imIn : input image
   * @param[in]  nbAngle : nomber of opening (if nbAngle == 90 => every 2
   * degrees)
   * @param[in]  radius : the size of the segment  will be radius*2+1
   * @param[out] imOut : output image
   */
   template <class T>
   RES_T ImFastLineMaxOpen_Soille(const Image<T> &imIn,
                                      const int nbAngle, const int radius,
                                      Image<T> &imOut);
   template <class T>
   RES_T ImFastLineMaxClose_Soille(const Image<T> &imIn,
                                       const int nbAngle, const int radius,
                                       Image<T> &imOut);

#endif
  /** @endcond */

} // namespace smil

//#include "FastLine/LineNaive.hpp"
#include "private/FastLine/FastLineMorard.hpp"
#include "private/FastLine/FastLineSoille.hpp"

#endif
